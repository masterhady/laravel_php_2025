1- artisan commands: 
        1- php artisan serve 
        2- php artisan migrate 
        3- php artisan make:controller UserController 
        4- php artisan route:list

2- 
 Database : ORM --> Object Relational Mapper 


 1- table --> db  --> commands --> artisan 

 make:migration            Create a new migration file

 file --> create table --> 

 php artisan make:migration create_TABLENAME_table --> create table
 php artisan migrate --> apply tables into database 
 php artisan migrate:rollback --> back to last batch 
 php artisan migrate:refresh --> drop for all migrations files (down) and re migrate (up) 
 php artisan migrate:status -->

 php artisan make:migration create_teachers_table

https://laravel.com/docs/12.x/migrations#available-column-types

migration excute --> database --> php artisan migrate

// to add new column to exist table : 
        php artisan make:migration add_age_column_to_teachers_table
                $table->integer('age')->nullable();
// to drop table : 
        php artisan make:migration drop_courses_table 

// DB Structre --> DONE --> migrations

// DB Data --> MODEL --> make:model         Create a new Eloquent model class


table --> teachers --> plural 
model --> represent -->one row --> Teacher 

php artisan make:model Teacher 


module --> Teacher : 
        1- create table teachers 
        2- create model Teacher
        3- create controller TeacherController
        4- create route for Teacher
        5- create view for Teacher

module --> posts : 
            1- create table posts --> migration --> php artisan make:migration create_posts_table
            2- run migration --> php artisan migrate  
            3- create model --> php artisan make:model Post 

            4- controller 
            5- route
            6- view




User  --> users 
Teacher --> my_teachers

_________________________________________________________________________
Day 3: 
function --> form 
submit --> function 

## Validation: 
        https://laravel.com/docs/12.x/validation#available-validation-rules



1- add validation rules  
                controller: 
                        request()=>validate([
                                validation rules 
                        ])
2- edit validation messages: 
        controller: 
         request()=>validate([
                                validation rules 
                        ],[
                                validation messages
                        ])
3- show erorrs messages for user: 
create.blade.php
                1- @if($errors->any())
            <div class="alert alert-danger">
                <ul>
                    @foreach ($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        @endif

        2- after each input: 
           @error('name')
                <div class="text-danger">{{ $message }}</div>
            @enderror

4- if there is any erorr it deletes all input data to solve this: 
                <input value={{old("name")}}

_________________________________________________________________________
controller : 
                index, show, create, store, edit, update, delete 
CRUD index, show, create, store, edit, update, delete, 

create module: 
                1- create table:        
                        php artisan make:migration create_departments_table
                2- create model: 
                        php artisan make:model Department 
                3- create controller: 
                        php artisan make:controller DepartmentController --resource
                4- add routes: 
                        web.php 
                5- add views: 
                        create Views
                
Lab 3: 
        1- make sure the full crud of posts 
        2- create category --> resource controller 
        3- add validation 1-create  2-edit 

Bonus: 
        1- seeding - factory 
        2- pagination
_______________________________________________________

Day 4: 
        1- Relation 
        2- auth 
        3- middleware

1- Relation: 
                1- Teachers and Department 

        
1- one to many : 
        teacher belongs to department 
        department has many teachers

2- add department_id to teachers table 

4- create migration file: 
        php artisan make:migration add_department_id_to_teachers_table

5- define ralation between department and teacher: --> model  --> relations 


_____________________________________________________________________________--

1- Relation department and teachers --> one to many 

2- add department_id into teachers table : 
        php artisan make:migrgation add_department_id_to_teachers_table
                code: 
$table->foreignId('department_id')->constrained('departments')->onDelete('cascade')->onUpdate('cascade')->nullable();

3- php artisan migrate 

4- create teacher --> select departmnet 
                <select> 
                        get alllll departments --> teacher controller --> Department::all();
                </select>

5- view teacher with his department --> show the department into show of teacher  -> department_id 
i nned to shw the NAME of department 

6- so we need to define the relation:
in teacher model:
        function department(){
                return $this->belongsTo(Department::class);
        }
in department model: 
        function teachers(){
                return $this->hasMany(Teachers::class);
        }


7- in show of teacher: 
        $teacher->department->name


_______________________________________________________________


Auth system : 
                login registration logout 


https://github.com/laravel/ui 

1- composer require laravel/ui

2- php artisan ui bootstrap --auth   // controller.php home.blade.php 

3- npm install && npm run dev     (and the server of laravel is already)


1- to run your project: 
                php artisan serve 
                npm run dev
_____________________________________________________________________
middleware --> auth:
 
 1- Routes  -> middleware("auth")

 2- Controller  --> function __construct(){

 }
_______________________________________________________

Who is the create the department: 

        1- Relation between users and department: 
                user can create mnay of departments

                department belongsTo user 

        2- add user_id into departments


        3- create department --> user_id --> id logged in

        4- create department save the loggedIn user


______________________________________________________________



1- Relation --> models 

2- Auth --> commands

3- middleware("auth")

4- Gate 


Authentication --> who are you ? 

Authorization --> what can you do ? 


1- Authorization: 
                Gate  --> who the create the department he can edit/delete 
                        department -> user_id === loggedIn user_id 

to define your Gate: 
                app/providers/AppServiceProvider.php
                

Lab day4: 
                1- add new column to the users table --> image of user 

                1- relation between posts and comments 

                2- relation between posts and category 

                3-  you need to login to create/delete/edit post

                4- need to show who the creator of the post (relation posts + user)

                5- only the creator of the post who can edit/delete 

                6-  you need to login to create/delete/edit comment

                7- need to show who the creator of the comment (relation comment + user)

                8- only the creator of the comment who can edit/delete 

                Bonus: 
                        1- slug 
                        2- upload image  
________________________________________________________________________________

1- roles  -->  admin, manager 

php artisan make:migration add_role_to_users_table --> gates 


2- Request: --> validation rules + messages 
        php artisan make:request StoreDepartmentRequest 

3- API: 
        models + controller + Routes  

        laravel 12:     

        --> api.php --> routes --> /api/


        php artisan  install:api   
4- resource -->the returned data  


_______________________________________________________
 module courses: 
        1- create table
                php artisan make:migration create_courses_table 
        2- create model 
                php artisan make:model Course 
        3- create resource controller:  index  edit update create store detroy 

                                                edit / create -->  forms 
        4- create controller: 
                php artisan make:controller /API/CourseController --api 

                                index update store destroy show
_______________________________________________________
php artisan make:resource --> change the returned data  


// controller + api.php (routes)

        Lab 5: 
                1- use views: add role admin,user 
                                1- can edit or delete any post 

                1- posts use API 

                2- comments use API 

                3- return the posts with all comments  using API + Reource 

                4- add validation in Request for 
                                1- comment store and post store 
                                2- comment update and post update 
                

_______________________________________________________________________________


